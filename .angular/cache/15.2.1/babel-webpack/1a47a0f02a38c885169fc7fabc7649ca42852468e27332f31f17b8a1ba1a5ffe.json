{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { debounceTime, Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ObserveElementDirective = /*#__PURE__*/(() => {\n  class ObserveElementDirective {\n    constructor(element) {\n      this.element = element;\n      this.root = null;\n      this.rootMargin = '0px 0px 50px';\n      this.threshold = 0;\n      this.debounceTime = 500;\n      this.isContinuous = false;\n      this.isIntersecting = new EventEmitter();\n      this._isIntersecting = false;\n    }\n    ngOnInit() {\n      this.subscription = this.createAndObserve();\n    }\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n    createAndObserve() {\n      const options = {\n        root: this.root,\n        rootMargin: this.rootMargin,\n        threshold: this.threshold\n      };\n      return new Observable(subscriber => {\n        const intersectionObserver = new IntersectionObserver(entries => {\n          const {\n            isIntersecting\n          } = entries[0];\n          subscriber.next(isIntersecting);\n          isIntersecting && !this.isContinuous && intersectionObserver.disconnect();\n        }, options);\n        intersectionObserver.observe(this.element.nativeElement);\n        return {\n          unsubscribe() {\n            intersectionObserver.disconnect();\n          }\n        };\n      }).pipe(debounceTime(this.debounceTime)).subscribe(status => {\n        this.isIntersecting.emit(status);\n        this._isIntersecting = status;\n      });\n    }\n  }\n  ObserveElementDirective.ɵfac = function ObserveElementDirective_Factory(t) {\n    return new (t || ObserveElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  ObserveElementDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ObserveElementDirective,\n    selectors: [[\"\", \"appObserveElement\", \"\"]],\n    inputs: {\n      root: \"root\",\n      rootMargin: \"rootMargin\",\n      threshold: \"threshold\",\n      debounceTime: \"debounceTime\",\n      isContinuous: \"isContinuous\"\n    },\n    outputs: {\n      isIntersecting: \"isIntersecting\"\n    },\n    exportAs: [\"intersection\"]\n  });\n  return ObserveElementDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}