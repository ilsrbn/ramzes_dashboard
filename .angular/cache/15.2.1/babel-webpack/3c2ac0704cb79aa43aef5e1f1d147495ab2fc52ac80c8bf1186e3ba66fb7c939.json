{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { fromIntersectionObserver } from './from-intersection-observer';\nimport * as i0 from \"@angular/core\";\nexport let ObserveElementDirective = /*#__PURE__*/(() => {\n  class ObserveElementDirective {\n    constructor(element) {\n      this.element = element;\n      this.intersectionDebounce = 0;\n      this.intersectionRootMargin = '0px';\n      this.visibilityChange = new EventEmitter();\n      this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n      const element = this.element.nativeElement;\n      const config = {\n        root: this.intersectionRoot,\n        rootMargin: this.intersectionRootMargin,\n        threshold: this.intersectionThreshold\n      };\n      fromIntersectionObserver(element, config, this.intersectionDebounce).pipe(takeUntil(this.destroy$)).subscribe(status => {\n        this.visibilityChange.emit(status);\n      });\n    }\n    ngOnDestroy() {\n      this.destroy$.next(true);\n    }\n  }\n  ObserveElementDirective.ɵfac = function ObserveElementDirective_Factory(t) {\n    return new (t || ObserveElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  ObserveElementDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ObserveElementDirective,\n    selectors: [[\"\", \"intersectionObserver\", \"\"]],\n    inputs: {\n      intersectionDebounce: \"intersectionDebounce\",\n      intersectionRootMargin: \"intersectionRootMargin\",\n      intersectionRoot: \"intersectionRoot\",\n      intersectionThreshold: \"intersectionThreshold\"\n    },\n    outputs: {\n      visibilityChange: \"visibilityChange\"\n    }\n  });\n  return ObserveElementDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}