{"ast":null,"code":"/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelError';\n  }\n  get isCancelled() {\n    return true;\n  }\n}\nexport class CancelablePromise {\n  constructor(executor) {\n    this._isResolved = false;\n    this._isRejected = false;\n    this._isCancelled = false;\n    this._cancelHandlers = [];\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      const onResolve = value => {\n        var _a;\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._isResolved = true;\n        (_a = this._resolve) === null || _a === void 0 ? void 0 : _a.call(this, value);\n      };\n      const onReject = reason => {\n        var _a;\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._isRejected = true;\n        (_a = this._reject) === null || _a === void 0 ? void 0 : _a.call(this, reason);\n      };\n      const onCancel = cancelHandler => {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._cancelHandlers.push(cancelHandler);\n      };\n      Object.defineProperty(onCancel, 'isResolved', {\n        get: () => this._isResolved\n      });\n      Object.defineProperty(onCancel, 'isRejected', {\n        get: () => this._isRejected\n      });\n      Object.defineProperty(onCancel, 'isCancelled', {\n        get: () => this._isCancelled\n      });\n      return executor(onResolve, onReject, onCancel);\n    });\n  }\n  then(onFulfilled, onRejected) {\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  catch(onRejected) {\n    return this._promise.catch(onRejected);\n  }\n  finally(onFinally) {\n    return this._promise.finally(onFinally);\n  }\n  cancel() {\n    var _a;\n    if (this._isResolved || this._isRejected || this._isCancelled) {\n      return;\n    }\n    this._isCancelled = true;\n    if (this._cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this._cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn('Cancellation threw an error', error);\n        return;\n      }\n    }\n    this._cancelHandlers.length = 0;\n    (_a = this._reject) === null || _a === void 0 ? void 0 : _a.call(this, new CancelError('Request aborted'));\n  }\n  get isCancelled() {\n    return this._isCancelled;\n  }\n}\nSymbol.toStringTag;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}