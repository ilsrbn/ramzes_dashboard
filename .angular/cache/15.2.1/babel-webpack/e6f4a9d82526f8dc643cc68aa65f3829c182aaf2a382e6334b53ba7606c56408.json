{"ast":null,"code":"import { __awaiter } from \"tslib\";\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { HttpHeaders } from '@angular/common/http';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ApiError } from './ApiError';\nconst isDefined = value => {\n  return value !== undefined && value !== null;\n};\nconst isString = value => {\n  return typeof value === 'string';\n};\nconst isStringWithValue = value => {\n  return isString(value) && value !== '';\n};\nconst isBlob = value => {\n  return typeof value === 'object' && typeof value.type === 'string' && typeof value.stream === 'function' && typeof value.arrayBuffer === 'function' && typeof value.constructor === 'function' && typeof value.constructor.name === 'string' && /^(Blob|File)$/.test(value.constructor.name) && /^(Blob|File)$/.test(value[Symbol.toStringTag]);\n};\nconst isFormData = value => {\n  return value instanceof FormData;\n};\nconst base64 = str => {\n  try {\n    return btoa(str);\n  } catch (err) {\n    // @ts-ignore\n    return Buffer.from(str).toString('base64');\n  }\n};\nconst getQueryString = params => {\n  const qs = [];\n  const append = (key, value) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n  const process = (key, value) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          process(key, v);\n        });\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([k, v]) => {\n          process(`${key}[${k}]`, v);\n        });\n      } else {\n        append(key, value);\n      }\n    }\n  };\n  Object.entries(params).forEach(([key, value]) => {\n    process(key, value);\n  });\n  if (qs.length > 0) {\n    return `?${qs.join('&')}`;\n  }\n  return '';\n};\nconst getUrl = (config, options) => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n  const path = options.url.replace('{api-version}', config.VERSION).replace(/{(.*?)}/g, (substring, group) => {\n    var _a;\n    if ((_a = options.path) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(group)) {\n      return encoder(String(options.path[group]));\n    }\n    return substring;\n  });\n  const url = `${config.BASE}${path}`;\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`;\n  }\n  return url;\n};\nconst getFormData = options => {\n  if (options.formData) {\n    const formData = new FormData();\n    const process = (key, value) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n    Object.entries(options.formData).filter(([_, value]) => isDefined(value)).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        value.forEach(v => process(key, v));\n      } else {\n        process(key, value);\n      }\n    });\n    return formData;\n  }\n  return undefined;\n};\nconst resolve = (options, resolver) => __awaiter(void 0, void 0, void 0, function* () {\n  if (typeof resolver === 'function') {\n    return resolver(options);\n  }\n  return resolver;\n});\nconst getHeaders = (config, options) => {\n  return forkJoin({\n    token: resolve(options, config.TOKEN),\n    username: resolve(options, config.USERNAME),\n    password: resolve(options, config.PASSWORD),\n    additionalHeaders: resolve(options, config.HEADERS)\n  }).pipe(map(({\n    token,\n    username,\n    password,\n    additionalHeaders\n  }) => {\n    const headers = Object.entries(Object.assign(Object.assign({\n      Accept: 'application/json'\n    }, additionalHeaders), options.headers)).filter(([_, value]) => isDefined(value)).reduce((headers, [key, value]) => Object.assign(Object.assign({}, headers), {\n      [key]: String(value)\n    }), {});\n    if (isStringWithValue(token)) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n      const credentials = base64(`${username}:${password}`);\n      headers['Authorization'] = `Basic ${credentials}`;\n    }\n    if (options.body) {\n      if (options.mediaType) {\n        headers['Content-Type'] = options.mediaType;\n      } else if (isBlob(options.body)) {\n        headers['Content-Type'] = options.body.type || 'application/octet-stream';\n      } else if (isString(options.body)) {\n        headers['Content-Type'] = 'text/plain';\n      } else if (!isFormData(options.body)) {\n        headers['Content-Type'] = 'application/json';\n      }\n    }\n    return new HttpHeaders(headers);\n  }));\n};\nconst getRequestBody = options => {\n  var _a;\n  if (options.body) {\n    if ((_a = options.mediaType) === null || _a === void 0 ? void 0 : _a.includes('/json')) {\n      return JSON.stringify(options.body);\n    } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n      return options.body;\n    } else {\n      return JSON.stringify(options.body);\n    }\n  }\n  return undefined;\n};\nexport const sendRequest = (config, options, http, url, body, formData, headers) => {\n  return http.request(options.method, url, {\n    headers,\n    body: body !== null && body !== void 0 ? body : formData,\n    withCredentials: config.WITH_CREDENTIALS,\n    observe: 'response'\n  });\n};\nconst getResponseHeader = (response, responseHeader) => {\n  if (responseHeader) {\n    const value = response.headers.get(responseHeader);\n    if (isString(value)) {\n      return value;\n    }\n  }\n  return undefined;\n};\nconst getResponseBody = response => {\n  if (response.status !== 204 && response.body !== null) {\n    return response.body;\n  }\n  return undefined;\n};\nconst catchErrorCodes = (options, result) => {\n  const errors = Object.assign({\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    500: 'Internal Server Error',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable'\n  }, options.errors);\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n  if (!result.ok) {\n    throw new ApiError(options, result, 'Generic Error');\n  }\n};\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param http The Angular HTTP client\n * @param options The request options from the service\n * @returns Observable<T>\n * @throws ApiError\n */\nexport const request = (config, http, options) => {\n  const url = getUrl(config, options);\n  const formData = getFormData(options);\n  const body = getRequestBody(options);\n  return getHeaders(config, options).pipe(switchMap(headers => {\n    return sendRequest(config, options, http, url, formData, body, headers);\n  }), map(response => {\n    const responseBody = getResponseBody(response);\n    const responseHeader = getResponseHeader(response, options.responseHeader);\n    return {\n      url,\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      body: responseHeader !== null && responseHeader !== void 0 ? responseHeader : responseBody\n    };\n  }), catchError(error => {\n    var _a;\n    if (!error.status) {\n      return throwError(error);\n    }\n    return of({\n      url,\n      ok: error.ok,\n      status: error.status,\n      statusText: error.statusText,\n      body: (_a = error.error) !== null && _a !== void 0 ? _a : error.statusText\n    });\n  }), map(result => {\n    catchErrorCodes(options, result);\n    return result.body;\n  }), catchError(error => {\n    return throwError(error);\n  }));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}