{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(baseHttp, adminAuthService, jwtHelper, router) {\n      this.baseHttp = baseHttp;\n      this.adminAuthService = adminAuthService;\n      this.jwtHelper = jwtHelper;\n      this.router = router;\n    }\n    handleError(error) {\n      if (error.status === 0) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      }\n      // Return an observable with a user-facing error message.\n      return throwError(() => new Error('Something bad happened; please try again later.'));\n    }\n    login(username, password) {\n      //   this.http.post<AccessTokenDto>('http://localhost/3005/api/auth/login', {\n      //     username,\n      //     password\n      //   }).pipe(catchError(err => {\n      //     console.log(err);\n      //     return of(err)\n      //   })).subscribe((resp) => {\n      //     console.log({ resp });\n      //   })\n      return this.adminAuthService.login({\n        username,\n        password\n      }).pipe(catchError(this.handleError)).subscribe(resp => {\n        console.log({\n          resp\n        });\n        const {\n          access_token\n        } = resp;\n        localStorage.setItem('authBearer', access_token);\n        this.baseHttp.config.TOKEN = access_token;\n        this.router.navigateByUrl('app/photos');\n      });\n    }\n    isAuthenticated() {\n      const token = localStorage.getItem('authBearer');\n      // Check whether the token is expired and return\n      // true or false\n      return !this.jwtHelper.isTokenExpired(token);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.BaseHttpRequest), i0.ɵɵinject(i1.AdminAuthorizationService), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}