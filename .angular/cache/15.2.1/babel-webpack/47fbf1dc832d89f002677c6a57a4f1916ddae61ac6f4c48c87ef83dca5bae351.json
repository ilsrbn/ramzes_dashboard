{"ast":null,"code":"import { fromEvent } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let BookmarkService = /*#__PURE__*/(() => {\n  class BookmarkService {\n    constructor() {\n      this.bookmarks = [];\n      this.loadState();\n      this.storageListenSub = fromEvent(window, 'storage').subscribe(event => {\n        if (event.key === 'bookmarks') this.loadState();\n      });\n    }\n    ngOnDestroy() {\n      if (this.storageListenSub) this.storageListenSub.unsubscribe();\n    }\n    getBookmarks() {\n      return this.bookmarks;\n    }\n    getBookmark(id) {\n      return this.bookmarks.find(b => b.id === id);\n    }\n    addBookmark(bookmark) {\n      this.bookmarks.push(bookmark);\n      this.saveState();\n    }\n    updateBookmark(id, updatedFields) {\n      const bookmark = this.getBookmark(id);\n      Object.assign(bookmark, updatedFields);\n      this.saveState();\n    }\n    deleteBookmark(id) {\n      const bookmarkIndex = this.bookmarks.findIndex(b => b.id === id);\n      if (bookmarkIndex == -1) return;\n      this.bookmarks.splice(bookmarkIndex, 1);\n      this.saveState();\n    }\n    saveState() {\n      localStorage.setItem('bookmarks', JSON.stringify(this.bookmarks));\n    }\n    loadState() {\n      try {\n        const bookmarksInStorage = JSON.parse(localStorage.getItem('bookmarks'), (key, value) => {\n          if (key == 'url') return new URL(value);\n          return value;\n        });\n        this.bookmarks.length = 0; // clear the bookmarks array (while keeping the reference)\n        this.bookmarks.push(...bookmarksInStorage);\n      } catch (e) {\n        console.log('There was an error retrieving the bookmarks from localStorage');\n        console.log(e);\n      }\n    }\n  }\n  BookmarkService.ɵfac = function BookmarkService_Factory(t) {\n    return new (t || BookmarkService)();\n  };\n  BookmarkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookmarkService,\n    factory: BookmarkService.ɵfac,\n    providedIn: 'root'\n  });\n  return BookmarkService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}